// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aereal/github-ops/internal/cli (interfaces: RegisterRepositorySecretUsecase)

// Package cli_test is a generated GoMock package.
package cli_test

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRegisterRepositorySecretUsecase is a mock of RegisterRepositorySecretUsecase interface.
type MockRegisterRepositorySecretUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterRepositorySecretUsecaseMockRecorder
	isgomock struct{}
}

// MockRegisterRepositorySecretUsecaseMockRecorder is the mock recorder for MockRegisterRepositorySecretUsecase.
type MockRegisterRepositorySecretUsecaseMockRecorder struct {
	mock *MockRegisterRepositorySecretUsecase
}

// NewMockRegisterRepositorySecretUsecase creates a new mock instance.
func NewMockRegisterRepositorySecretUsecase(ctrl *gomock.Controller) *MockRegisterRepositorySecretUsecase {
	mock := &MockRegisterRepositorySecretUsecase{ctrl: ctrl}
	mock.recorder = &MockRegisterRepositorySecretUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterRepositorySecretUsecase) EXPECT() *MockRegisterRepositorySecretUsecaseMockRecorder {
	return m.recorder
}

// DoRegisterRepositorySecret mocks base method.
func (m *MockRegisterRepositorySecretUsecase) DoRegisterRepositorySecret(ctx context.Context, repoOwner, repoName, secretName, plainMsg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoRegisterRepositorySecret", ctx, repoOwner, repoName, secretName, plainMsg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoRegisterRepositorySecret indicates an expected call of DoRegisterRepositorySecret.
func (mr *MockRegisterRepositorySecretUsecaseMockRecorder) DoRegisterRepositorySecret(ctx, repoOwner, repoName, secretName, plainMsg any) *MockRegisterRepositorySecretUsecaseDoRegisterRepositorySecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoRegisterRepositorySecret", reflect.TypeOf((*MockRegisterRepositorySecretUsecase)(nil).DoRegisterRepositorySecret), ctx, repoOwner, repoName, secretName, plainMsg)
	return &MockRegisterRepositorySecretUsecaseDoRegisterRepositorySecretCall{Call: call}
}

// MockRegisterRepositorySecretUsecaseDoRegisterRepositorySecretCall wrap *gomock.Call
type MockRegisterRepositorySecretUsecaseDoRegisterRepositorySecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRegisterRepositorySecretUsecaseDoRegisterRepositorySecretCall) Return(arg0 error) *MockRegisterRepositorySecretUsecaseDoRegisterRepositorySecretCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRegisterRepositorySecretUsecaseDoRegisterRepositorySecretCall) Do(f func(context.Context, string, string, string, string) error) *MockRegisterRepositorySecretUsecaseDoRegisterRepositorySecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRegisterRepositorySecretUsecaseDoRegisterRepositorySecretCall) DoAndReturn(f func(context.Context, string, string, string, string) error) *MockRegisterRepositorySecretUsecaseDoRegisterRepositorySecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
