// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aereal/github-ops/internal/usecases (interfaces: GHActionsService)

// Package usecases_test is a generated GoMock package.
package usecases_test

import (
	context "context"
	reflect "reflect"

	github "github.com/google/go-github/v69/github"
	gomock "go.uber.org/mock/gomock"
)

// MockGHActionsService is a mock of GHActionsService interface.
type MockGHActionsService struct {
	ctrl     *gomock.Controller
	recorder *MockGHActionsServiceMockRecorder
	isgomock struct{}
}

// MockGHActionsServiceMockRecorder is the mock recorder for MockGHActionsService.
type MockGHActionsServiceMockRecorder struct {
	mock *MockGHActionsService
}

// NewMockGHActionsService creates a new mock instance.
func NewMockGHActionsService(ctrl *gomock.Controller) *MockGHActionsService {
	mock := &MockGHActionsService{ctrl: ctrl}
	mock.recorder = &MockGHActionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGHActionsService) EXPECT() *MockGHActionsServiceMockRecorder {
	return m.recorder
}

// CreateOrUpdateRepoSecret mocks base method.
func (m *MockGHActionsService) CreateOrUpdateRepoSecret(ctx context.Context, owner, repo string, eSecret *github.EncryptedSecret) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateRepoSecret", ctx, owner, repo, eSecret)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateRepoSecret indicates an expected call of CreateOrUpdateRepoSecret.
func (mr *MockGHActionsServiceMockRecorder) CreateOrUpdateRepoSecret(ctx, owner, repo, eSecret any) *MockGHActionsServiceCreateOrUpdateRepoSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateRepoSecret", reflect.TypeOf((*MockGHActionsService)(nil).CreateOrUpdateRepoSecret), ctx, owner, repo, eSecret)
	return &MockGHActionsServiceCreateOrUpdateRepoSecretCall{Call: call}
}

// MockGHActionsServiceCreateOrUpdateRepoSecretCall wrap *gomock.Call
type MockGHActionsServiceCreateOrUpdateRepoSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGHActionsServiceCreateOrUpdateRepoSecretCall) Return(arg0 *github.Response, arg1 error) *MockGHActionsServiceCreateOrUpdateRepoSecretCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGHActionsServiceCreateOrUpdateRepoSecretCall) Do(f func(context.Context, string, string, *github.EncryptedSecret) (*github.Response, error)) *MockGHActionsServiceCreateOrUpdateRepoSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGHActionsServiceCreateOrUpdateRepoSecretCall) DoAndReturn(f func(context.Context, string, string, *github.EncryptedSecret) (*github.Response, error)) *MockGHActionsServiceCreateOrUpdateRepoSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRepoPublicKey mocks base method.
func (m *MockGHActionsService) GetRepoPublicKey(ctx context.Context, owner, repo string) (*github.PublicKey, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoPublicKey", ctx, owner, repo)
	ret0, _ := ret[0].(*github.PublicKey)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRepoPublicKey indicates an expected call of GetRepoPublicKey.
func (mr *MockGHActionsServiceMockRecorder) GetRepoPublicKey(ctx, owner, repo any) *MockGHActionsServiceGetRepoPublicKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoPublicKey", reflect.TypeOf((*MockGHActionsService)(nil).GetRepoPublicKey), ctx, owner, repo)
	return &MockGHActionsServiceGetRepoPublicKeyCall{Call: call}
}

// MockGHActionsServiceGetRepoPublicKeyCall wrap *gomock.Call
type MockGHActionsServiceGetRepoPublicKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGHActionsServiceGetRepoPublicKeyCall) Return(arg0 *github.PublicKey, arg1 *github.Response, arg2 error) *MockGHActionsServiceGetRepoPublicKeyCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGHActionsServiceGetRepoPublicKeyCall) Do(f func(context.Context, string, string) (*github.PublicKey, *github.Response, error)) *MockGHActionsServiceGetRepoPublicKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGHActionsServiceGetRepoPublicKeyCall) DoAndReturn(f func(context.Context, string, string) (*github.PublicKey, *github.Response, error)) *MockGHActionsServiceGetRepoPublicKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
